// api/cleanup-fcm-tokens.js - VERSI√ìN CORREGIDA
import admin from 'firebase-admin';

if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert({
      projectId: process.env.FIREBASE_PROJECT_ID,
      privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
      clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
    }),
  });
}

const db = admin.firestore();
const messaging = admin.messaging();

// Funci√≥n mejorada para validar tokens
async function validateToken(token) {
  try {
    // M√©todo m√°s confiable para validar tokens
    const response = await messaging.send({
      token: token,
      notification: { title: 'Validation' },
    }, true); // dryRun = true
    
    return response.success;
  } catch (error) {
    console.log(`‚ùå Token inv√°lido: ${token.substring(0, 10)}... - ${error.errorInfo?.code || error.message}`);
    return false;
  }
}


// api/cleanup-fcm-tokens.js - AGREGAR DESPU√âS DE validateToken

// Funci√≥n para limpiar tokens inv√°lidos de la colecci√≥n fcmTokens
async function cleanupInvalidFcmTokens() {
  try {
    console.log('üßπ BUSCANDO TOKENS INV√ÅLIDOS EN COLECCI√ìN fcmTokens...');
    
    const oneMonthAgo = new Date();
    oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
    
    // 1. Buscar tokens muy antiguos (m√°s de 1 mes)
    const oldTokensSnapshot = await db.collection('fcmTokens')
      .where('updatedAt', '<', oneMonthAgo)
      .get();

    console.log(`üìÖ Tokens antiguos encontrados: ${oldTokensSnapshot.size}`);
    
    let deletedOldTokens = 0;
    const batch = db.batch();
    
    // Eliminar tokens antiguos
    oldTokensSnapshot.forEach(doc => {
      batch.delete(doc.ref);
      deletedOldTokens++;
    });
    
    if (deletedOldTokens > 0) {
      await batch.commit();
      console.log(`üóëÔ∏è Eliminados ${deletedOldTokens} tokens antiguos`);
    }
    
    // 2. Buscar tokens marcados como inv√°lidos
    const invalidTokensSnapshot = await db.collection('fcmTokens')
      .where('isValid', '==', false)
      .get();
    
    console.log(`‚ùå Tokens inv√°lidos encontrados: ${invalidTokensSnapshot.size}`);
    
    let deletedInvalidTokens = 0;
    const batch2 = db.batch();
    
    invalidTokensSnapshot.forEach(doc => {
      batch2.delete(doc.ref);
      deletedInvalidTokens++;
    });
    
    if (deletedInvalidTokens > 0) {
      await batch2.commit();
      console.log(`üóëÔ∏è Eliminados ${deletedInvalidTokens} tokens inv√°lidos`);
    }
    
    // 3. Buscar tokens sin UID (hu√©rfanos)
    const orphanTokensSnapshot = await db.collection('fcmTokens')
      .where('uid', '==', null)
      .limit(100) // Limitar para no sobrecargar
      .get();
    
    console.log(`üëª Tokens hu√©rfanos encontrados: ${orphanTokensSnapshot.size}`);
    
    let deletedOrphanTokens = 0;
    const batch3 = db.batch();
    
    orphanTokensSnapshot.forEach(doc => {
      batch3.delete(doc.ref);
      deletedOrphanTokens++;
    });
    
    if (deletedOrphanTokens > 0) {
      await batch3.commit();
      console.log(`üóëÔ∏è Eliminados ${deletedOrphanTokens} tokens hu√©rfanos`);
    }
    
    return {
      deletedOldTokens,
      deletedInvalidTokens,
      deletedOrphanTokens,
      totalDeleted: deletedOldTokens + deletedInvalidTokens + deletedOrphanTokens
    };
    
  } catch (error) {
    console.error('‚ùå Error limpiando colecci√≥n fcmTokens:', error);
    return { error: error.message };
  }
}

// Funci√≥n para sincronizar fcmTokens con users
async function syncFcmTokensWithUsers() {
  try {
    console.log('üîÑ SINCRONIZANDO COLECCI√ìN fcmTokens CON users...');
    
    const usersSnap = await db.collection('users').get();
    const allValidTokens = new Set();
    
    // Recolectar todos los tokens v√°lidos de users
    usersSnap.forEach(userDoc => {
      const tokens = userDoc.data().tokens || [];
      tokens.forEach(token => allValidTokens.add(token));
    });
    
    console.log(`üìä Tokens v√°lidos en users: ${allValidTokens.size}`);
    
    // Obtener todos los documentos de fcmTokens
    const fcmTokensSnap = await db.collection('fcmTokens').get();
    console.log(`üìã Documentos en fcmTokens: ${fcmTokensSnap.size}`);
    
    let orphanFcmTokens = 0;
    const batch = db.batch();
    
    // Eliminar tokens de fcmTokens que no est√°n en users
    fcmTokensSnap.forEach(doc => {
      const tokenData = doc.data();
      if (!allValidTokens.has(doc.id)) {
        batch.delete(doc.ref);
        orphanFcmTokens++;
      }
    });
    
    if (orphanFcmTokens > 0) {
      await batch.commit();
      console.log(`üóëÔ∏è Eliminados ${orphanFcmTokens} tokens hu√©rfanos de fcmTokens`);
    } else {
      console.log('‚úÖ No hay tokens hu√©rfanos en fcmTokens');
    }
    
    return { orphanFcmTokens };
    
  } catch (error) {
    console.error('‚ùå Error sincronizando fcmTokens:', error);
    return { error: error.message };
  }
}

export default async function handler(req, res) {
  // Configurar CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'M√©todo no permitido' });
  }

  try {
    console.log('üßπ INICIANDO LIMPIEZA DE TOKENS FCM...');
    
    const usersSnap = await db.collection('users').get();
    console.log(`üìä Usuarios a procesar: ${usersSnap.size}`);
    
    let totalProcessed = 0;
    let totalCleaned = 0;
    let adminProcessed = false;

    // Procesar cada usuario individualmente
    for (const userDoc of usersSnap.docs) {
      try {
        const uid = userDoc.id;
        const userData = userDoc.data();
        const allTokens = Array.isArray(userData.tokens) ? userData.tokens : [];
        
        console.log(`üë§ Procesando usuario ${uid}: ${allTokens.length} tokens`);
    
        // Busca esta l√≠nea y aj√∫stala:
        if (userData.email && userData.email.includes('admin') || userData.role === 'admin' || uid === 'ZqyiPJtJ74YyEZ1WSD9xOlGhKue2') {
        console.log(`‚≠ê USUARIO ADMIN DETECTADO: ${userData.email || uid}`);
        adminProcessed = true;
        }

        if (allTokens.length === 0) {
          console.log(`‚û°Ô∏è Usuario ${uid} sin tokens, saltando...`);
          totalProcessed++;
          continue;
        }

        // Si tiene solo 1 token, lo mantenemos sin validar (probablemente v√°lido)
        if (allTokens.length === 1) {
          console.log(`‚úÖ Usuario ${uid} tiene solo 1 token, manteniendo...`);
          totalProcessed++;
          continue;
        }

        // Si tiene m√∫ltiples tokens, validamos y limpiamos
        console.log(`üîç Validando ${allTokens.length} tokens para usuario ${uid}...`);
        
        const validTokens = [];
        let validationErrors = 0;

        // Validar cada token
        for (const token of allTokens) {
          const isValid = await validateToken(token);
          if (isValid) {
            validTokens.push(token);
            console.log(`‚úÖ Token v√°lido: ${token.substring(0, 15)}...`);
          } else {
            validationErrors++;
          }
        }

        console.log(`üìã Resultado validaci√≥n - V√°lidos: ${validTokens.length}, Inv√°lidos: ${validationErrors}`);

        // Decidir qu√© tokens mantener
        let tokensToKeep = [];
        
        if (validTokens.length > 0) {
          // Mantener m√°ximo 3 tokens v√°lidos (los m√°s recientes)
          tokensToKeep = validTokens.slice(0, 3);
        } else {
          // Si ninguno es v√°lido, mantener el primero (m√°s reciente)
          tokensToKeep = [allTokens[0]];
          console.log(`‚ö†Ô∏è Ning√∫n token v√°lido, manteniendo el m√°s reciente: ${allTokens[0].substring(0, 15)}...`);
        }

        // Actualizar solo si hay cambios
        if (tokensToKeep.length !== allTokens.length) {
          console.log(`üîÑ Actualizando usuario ${uid}: ${allTokens.length} ‚Üí ${tokensToKeep.length} tokens`);
          
          await userDoc.ref.update({
            tokens: tokensToKeep,
            lastCleanup: new Date().toISOString(),
            cleanupStats: {
              before: allTokens.length,
              after: tokensToKeep.length,
              timestamp: new Date().toISOString()
            }
          });
          
          totalCleaned++;
          
          // Actualizar/crear en fcmTokens collection
          for (const token of tokensToKeep) {
            await db.collection('fcmTokens').doc(token).set({
              uid: uid,
              isValid: true,
              lastValidated: new Date().toISOString(),
              updatedAt: admin.firestore.FieldValue.serverTimestamp()
            }, { merge: true });
          }
          
          console.log(`‚úÖ Usuario ${uid} actualizado: ${tokensToKeep.length} tokens mantenidos`);
        } else {
          console.log(`‚û°Ô∏è Usuario ${uid} sin cambios necesarios`);
        }
        
        totalProcessed++;

      } catch (userError) {
        console.error(`‚ùå Error procesando usuario ${userDoc.id}:`, userError);
        // Continuar con el siguiente usuario aunque falle uno
        totalProcessed++;
      }
    }


    console.log('üéâ LIMPIEZA DE USUARIOS COMPLETADA');
    console.log(`üìä Resumen usuarios:`);
    console.log(`   üë• Usuarios procesados: ${totalProcessed}`);
    console.log(`   üßπ Usuarios limpiados: ${totalCleaned}`);
    console.log(`   ‚≠ê Admin procesado: ${adminProcessed ? '‚úÖ' : '‚ùå'}`);

    // üî• NUEVO: LIMPIAR COLECCI√ìN fcmTokens
    console.log('\nüî• INICIANDO LIMPIEZA DE COLECCI√ìN fcmTokens...');
    
    // 1. Limpiar tokens inv√°lidos/antiguos
    const fcmCleanupResult = await cleanupInvalidFcmTokens();
    
    // 2. Sincronizar fcmTokens con users
    const syncResult = await syncFcmTokensWithUsers();
    
    console.log('üéä LIMPIEZA COMPLETA FINALIZADA');
    console.log(`üìä RESUMEN FINAL:`);
    console.log(`   üë• Usuarios procesados: ${totalProcessed}`);
    console.log(`   üßπ Usuarios limpiados: ${totalCleaned}`);
    console.log(`   üóëÔ∏è  Tokens eliminados de fcmTokens: ${fcmCleanupResult.totalDeleted || 0}`);
    console.log(`   üîÑ Tokens hu√©rfanos eliminados: ${syncResult.orphanFcmTokens || 0}`);
    console.log(`   ‚≠ê Admin procesado: ${adminProcessed ? '‚úÖ' : '‚ùå'}`);

    res.status(200).json({
      success: true,
      message: 'Limpieza completa finalizada',
      stats: {
        users: {
          totalProcessed: totalProcessed,
          cleaned: totalCleaned,
          adminProcessed: adminProcessed
        },
        fcmTokens: {
          deletedOld: fcmCleanupResult.deletedOldTokens || 0,
          deletedInvalid: fcmCleanupResult.deletedInvalidTokens || 0,
          deletedOrphans: fcmCleanupResult.deletedOrphanTokens || 0,
          syncOrphans: syncResult.orphanFcmTokens || 0,
          totalDeleted: (fcmCleanupResult.totalDeleted || 0) + (syncResult.orphanFcmTokens || 0)
        },
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('üí• ERROR CR√çTICO EN LIMPIEZA:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
}
